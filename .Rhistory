response3 <- request3 |>
req_perform()
resp_status(response3)
resp_content_type(response3)
deaths <- resp_body_json(response3, simplifyVector = TRUE)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
deaths<- deaths|>
mutate(
date=ymd(date),
year=year(date),
month=month(date)
)
deaths<- deaths|>
mutate(
state=reorder(state, deaths)
)|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(state)
deaths|>
# reorder state
mutate(
state=reorder(state, deaths)
)|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state, deaths)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
deaths|>
# reorder state
mutate(
state=reorder(state, tot_deaths)
)|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state, deaths)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
deaths|>
# reorder state
mutate(
state=reorder(state, tot_deaths)
)|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state, deaths)) +
geom_col() +
coord_flip() +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
request3 <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000)
response3 <- request3 |>
req_perform()
resp_status(response3)
resp_content_type(response3)
deaths <- resp_body_json(response3, simplifyVector = TRUE)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
deaths<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
mutate(
state=reorder(state, tot_deaths)
)
arrange(state)
deaths<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
mutate(
state=reorder(state, tot_deaths)
)
View(deaths)
deaths|>
# reorder state
mutate(
state=reorder(state, tot_deaths)
)|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state, tot_deaths)) +
geom_col() +
coord_flip() +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
request3 <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000)
response3 <- request3 |>
req_perform()
resp_status(response3)
resp_content_type(response3)
deaths <- resp_body_json(response3, simplifyVector = TRUE)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
deaths<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
mutate(
state=reorder(state, tot_deaths)
)
deaths|>
# reorder state
mutate(
state=reorder(state, tot_deaths)
)|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state, tot_deaths)) +
geom_col() +
coord_flip() +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request("https://api.census.gov/data/2021/pep/population") |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
'for' = "state:*",
key = census_key
)
response <- request |>
req_perform()
resp_status(response)
resp_content_type(response)
population <- resp_body_json(response, simplifyVector = TRUE, simplifyMatrix= TRUE)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |>
## Use janitor row to names function
row_to_names(row_number = 1)|>
# convert to tibble
as_tibble()|>
# remove stat column
select(-state)|>
# rename state column to state_name
rename(state_name=NAME)|>
# use pivot_longer to tidy  NOT SURE!!!!!!!!!!!!!!!!!
pivot_longer(
cols= c(POP_2020, POP_2021),
names_to = "year",
values_to= "population"
)|>
# remove POP_ from year
# parese all relevant colunns to numeric
mutate(
year=str_remove(year, "POP_"),
population=as.numeric(population),
year=as.numeric(year)
)|>
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
mutate(
state= case_when(
state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]))
population |>
# reorder state
mutate(
state_name=reorder(state_name, population)
)|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state_name, population)) +
geom_col() +
coord_flip() +
facet_wrap(~year) +
labs(x= "state name", y= "population size")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url)
#convert list to data frame. You can use map_df in purrr package
regions<- map_df(1:nrow(regions),
function(i){tibble(
state_name=regions$states[[i]],
region=regions$region[[i]],
region_name=regions$region_name[[i]])})
regions <- regions|>
mutate(region_name = if_else(region_name == "New York and New Jersey, Puerto Rico, Virgin Islands",
"NY & NJ & PR & VI", region_name))
population <- left_join(population, regions, by="state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request2<- request(api)
response2 <- request2 |>
req_perform()
resp_status(response2)
resp_content_type(response2)
cases_raw <- resp_body_json(response2, simplifyVector = TRUE)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request2<- request(api)
response2 <- request2 |>
req_perform()
resp_status(response2)
resp_content_type(response2)
cases_raw <- resp_body_json(response2, simplifyVector = TRUE)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
request2 <- request(api) |>
req_url_query(`$limit` = 10000000000)
response2 <- request2 |>
req_perform()
resp_status(response2)
resp_content_type(response2)
cases_raw <- resp_body_json(response2, simplifyVector = TRUE)
View(cases_raw)
View(cases_raw)
#head(cases_raw)
cases_raw<- cases_raw|>
select(state=state, date=end_date, cases=new_cases)|>
mutate(
cases=as.numeric(cases),
date=as.Date(date)
)
View(cases_raw)
cases_raw<-cases_raw|>
mutate(
year=year(date)
)
cases<- left_join(population, cases_raw, by=c("state","year"))
cases<- cases|>
mutate(
cases_per_100000= ((cases/population)*100000)
)|>
filter(year %in% c(2020, 2021))
View(population)
View(cases)
ggplot(cases, aes(x = date, y = cases_per_100000, color = state)) +
geom_line() +
facet_wrap(~region_name) +
labs(
x = "Date",
y = "Cases per 100,000",
color = "State"
)+
theme(
axis.text.x = element_text(size= 5)
)
library(lubridate)
cases<- cases|>
mutate(
date=ymd(date),
month=month(date, label=TRUE)
)
cases_q13<- cases|>
select(state, year, month, cases)|>
group_by(year, month) |>
summarise(
total_cases = sum(cases, na.rm = TRUE), .groups="drop") |>
arrange(year, month)
library(knitr)
kable(cases_q13)
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
request3 <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000)
response3 <- request3 |>
req_perform()
resp_status(response3)
resp_content_type(response3)
deaths <- resp_body_json(response3, simplifyVector = TRUE)
View(deaths)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
deaths<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
mutate(
state=reorder(state, tot_deaths)
)
View(deaths)
deaths<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(tot_deaths)
request3 <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000)
response3 <- request3 |>
req_perform()
resp_status(response3)
resp_content_type(response3)
deaths <- resp_body_json(response3, simplifyVector = TRUE)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
deaths<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(tot_deaths)
View(deaths)
deaths<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(tot_deaths, desc=TRUE)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
request3 <- request(deaths_url) |>
req_url_query(`$limit` = 10000000000)
response3 <- request3 |>
req_perform()
resp_status(response3)
resp_content_type(response3)
deaths <- resp_body_json(response3, simplifyVector = TRUE)
deaths_selected<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
deaths<- deaths|>
select(state=state, date=end_date, deaths= total_deaths)|>
mutate(
deaths=as.numeric(deaths),
date=as.Date(date)
)
deaths_10top<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(tot_deaths, desc=TRUE)
View(deaths_10top)
?arrange
deaths_10top<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(desc(tot_deaths))
View(deaths_10top)
deaths_10top<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(desc(tot_deaths))|>
head(10)
View(deaths_10top)
deaths_10top|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state, tot_deaths)) +
geom_col() +
coord_flip() +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
deaths_10top<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(desc(tot_deaths))|>
head(11)
kable(deaths_10top)
# I chose to keep the total number of united states
deaths_10top<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(desc(tot_deaths))|>
head(2:11)
deaths_10top<- deaths|>
group_by(state) |>
summarise(
tot_deaths = sum(deaths, na.rm = TRUE), .groups="drop") |>
arrange(desc(tot_deaths))|>
slice(-1)|>
head(10)
kable(deaths_10top)
deaths_10top|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state, tot_deaths)) +
geom_col() +
coord_flip() +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
deaths_10top|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(state, tot_deaths)) +
reorder(state, tot_deaths)+
geom_col() +
coord_flip() +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
View(deaths_10top)
deaths_10top|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(x=reorder(state, tot_deaths), tot_deaths)) +
geom_col() +
coord_flip() +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 6)
)
deaths_10top|>
# assign aesthetic mapping
# use geom_col to plot barplot
# flip coordinates
# facet by year
ggplot(aes(x=reorder(state, tot_deaths), tot_deaths)) +
geom_col() +
coord_flip() +
labs(x= "state name", y= "deaths")+
theme(
axis.text.x = element_text(size= 10),
axis.text.y = element_text(size = 8)
)
